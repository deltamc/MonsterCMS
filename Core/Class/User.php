<?php namespace Monstercms\Core;

defined('MCMS_ACCESS') or die('No direct script access.');

class User
{
    /**
     * @var \Monstercms\Lib\DataBase;
     */
    private static $db;
    private static $usersTable;
    private static $usersDataTable;

    //Данные авторизированного пользователя
    private static $userData;
    //private static $login;
    //private static $password;
    private static $hash;
    private static $id;
    private static $role;


    const ADMIN = 'admin';
    const CONTENT_MANAGER = 'content_manager';
    const USER  = 'user';
    const GUEST = 'guest';
    const DEMO  = 'demo';






    public static function int()
    {
        if(self::$db === null){
            self::$db = Mcms::DB();
        }

        if(self::$usersTable === null){
            self::$usersTable = DB_TABLE_USERS;
        }

        if(self::$usersTable === null){
            self::$usersDataTable = DB_TABLE_USERS_DATA;
        }
    }



    /**
     * @param $password
     * @param int $cost
     * @return string
     */
    static function generateHash($password, $cost=11)
    {
        /* To generate the salt, first generate enough random bytes. Because
         * base64 returns one character for each 6 bits, the we should generate
         * at least 22*6/8=16.5 bytes, so we generate 17. Then we get the first
         * 22 base64 characters
         */
        $salt=substr(base64_encode(self::randomToken(17)), 0, 22);
        /* As blowfish takes a salt with the alphabet ./A-Za-z0-9 we have to
         * replace any '+' in the base64 string with '.'. We don't have to do
         * anything about the '=', as this only occurs when the b64 string is
         * padded, which is always after the first 22 characters.
         */
        $salt=str_replace("+", ".", $salt);
        /* Next, create a string that will be passed to crypt, containing all
         * of the settings, separated by dollar signs
         */
        $param='$'.implode('$', array(
                "2y", //select the most secure version of blowfish (>=PHP 5.3.7)
                str_pad($cost, 2, "0", STR_PAD_LEFT), //add the cost in two digits
                $salt //add the salt
            ));

        //now do the actual hashing
        return crypt($password, $param);
    }


    /*
     * Check the password against a hash generated by the generate_hash
     * function.
    */
    public static function passwordVerify($password, $hash){

        return ($hash === crypt($password, $hash));

    }








    protected static function randomToken($length = 32)
    {
        if(!isset($length) || intval($length) <= 8 ){
            $length = 32;
        }
        if (function_exists('random_bytes')) {
            return bin2hex(random_bytes($length));
        }
        if (function_exists('mcrypt_create_iv')) {
            return bin2hex(mcrypt_create_iv($length, MCRYPT_DEV_URANDOM));
        }
        if (function_exists('openssl_random_pseudo_bytes')) {
            return bin2hex(openssl_random_pseudo_bytes($length));
        }

        $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHI JKLMNOPRQSTUVWXYZ0123456789";
        $code  = "";
        $clen  = strlen($chars) - 1;

        while (strlen($code) < $length) {

            $code .= $chars[mt_rand(0, $clen)];
        }

        return $code;
    }



    /**
     * Метод проверяет есть ли пользователь с заданным логином
     * @param $login - логин
     * @param null $ignoreId - не учитывать пользователя с ид
     * @return bool
     */
    public function isUserByLogin($login, $ignoreId = null)
    {


        self::int();

        $table = self::$usersTable;
        $sql = "SELECT id FROM {$table} WHERE `login`= ?";

        if ($ignoreId !== null) {
            $sql .= ' AND id <> ' . intval($ignoreId);
        }


        $stmt = self::$db->prepare($sql);
        $stmt->execute(array($login));

        if (!$stmt->fetch(\PDO::FETCH_NUM)) {
            return true;
        }

        return false;
    }

    /**
     * Метод устанавливает данные пользователя.
     *
     * @param $hash
     * @return bool
     */
    public static function setData($hash)
    {
        $table = self::$usersTable;
        $sql = "SELECT id FROM {$table} WHERE `hash`= ?";
        $stmt = self::$db->prepare($sql);
        $stmt->execute(array($hash));
        $result = $stmt->fetch();

        if (!$result) {
            return false;
        }



        self::$hash     = $result['hash'];
        self::$id       = $result['id'];

        self::setProperties(self::$id);

        return true;
    }

    /**
     * Метод считывает свойства пользователя из бд     *
     * @param $userId
     * @return bool
     */
    protected static function setProperties($userId)
    {
        $table = self::$usersDataTable;
        $sql = "SELECT id FROM {$table} WHERE `id_user`= ?";
        $stmt = self::$db->prepare($sql);
        $stmt->execute(array($userId));
        $properties = $stmt->fetchAll(\PDO::FETCH_ASSOC);

        if (!$properties) {
            return false;
        }

        self::$userData = $properties;
    }

    /**
     * Метод обновляет хеш
     * @param $userId
     * @throws \Exception
     */
    protected static function updateHash($userId)
    {

        $hash   = md5(self::randomToken());
        $list   = array('hash' => $hash);
        $userId = (int) $userId;
        $table  = self::$usersTable;

        self::$db->update($list, $table, $userId);

        return $hash;
    }


    public static function authorizationByLoginAndPassword($login, $password)
    {

        $sql = "SELECT `id`, `password`, `role`  FROM `".DB_TABLE_USERS."` WHERE `login` = ? LIMIT 1";
        $stmt = self::$db->prepare($sql);
        $stmt->execute(array($login));
        $user = $stmt->fetch(\PDO::FETCH_ASSOC);

        if (!empty($user) && self::passwordVerify($password, $user['password']))
        {

            $hash = self::updateHash($user['id']);

            @session_start();
            $_SESSION['mcms_user']['hash']       = $hash;
            $_SESSION['mcms_user']['user_agent'] = md5($_SERVER['HTTP_USER_AGENT']);

            self::$hash = $hash;
            self::$id   = $user['id'];
            self::$role   = $user['role'];
            self::setProperties(self::$id);

            return true;
        }

        return false;
    }



    public static function isAdmin()
    {

        if (self::isAuthorization() && self::$role === self::ADMIN) {
            return true;
        }
        return false;
    }


    /**
     * Метод проверяет принадлежит ли пользователь к роли.
     * Возможно передать список ролей в массиве как первый аргумент метода
     * @param ...$roles
     * @return bool
     */
    public static function isAccess()
    {
        if (func_num_args() === 0) {
            return false;
        } elseif (func_num_args() === 1 && is_array(func_get_arg(0))) {
            $roles = func_get_arg(0);
        } else {
            $roles = func_get_args();
        }


        $isAuthorization = self::isAuthorization();


        foreach ($roles as $role) {
            if ($role === self::GUEST && !$isAuthorization) {
                return true;
            }

            if($role === self::$role) {
                return true;
            }
        }

        return false;
    }



    public static function isAuthorization(){

        if (self::$id) {
            return true;
        }

        @session_start();

        if (isset($_SESSION['mcms_user']['hash'] )){
            $hash = $_SESSION['mcms_user']['hash'];

            $sql = "SELECT `id`, `password`, `role`  FROM `" . DB_TABLE_USERS . "` WHERE `hash` = ? LIMIT 1";
            $stmt = self::$db->prepare($sql);
            $stmt->execute(array($hash));
            $user = $stmt->fetch(\PDO::FETCH_ASSOC);
            self::$hash = $hash;
            self::$id   = $user['id'];
            self::$role = $user['role'];
            self::setProperties(self::$id);
            return true;
        }

        return false;
    }

    public static function logOut()
    {
        @session_start();

        if (isset($_SESSION['mcms_user'])) {
            unset($_SESSION['mcms_user']);
        }

        self::$hash = null;
        self::$id   = null;
        self::$role = null;
        self::$userData = null;
    }

    public static function getId(){
        return self::$id;
    }
}